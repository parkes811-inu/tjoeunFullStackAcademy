------ 2024-02-19
------ 12일차 수업 내용

1. 기본 API  

자바 주요 클래스
- java.lang
• Object
• Wrapper Classes
• Math
• String
• StringBuffer
• StringBuilder

- java.util
• StringTokenizer
• Random
• Arrays
• Calendar
• Date

- java.time
• LocalDate
• LocalDateTime
• ZonedDateTime

- java.text
• SimpleDateFormat
• DecimalFormat
• MessageFormat

----------------------------------------------------------------------

2. Character 래퍼 클래스

- 메소드 											설명
• char toLowerCase(char ch)					: 지정된 문자를 소문자로 변환
• char toUpperCase(char ch) 				: 지정된 문자를 대문자로 변환
• boolean isAlphabetic(char ch) 			: 지정된 문자가 알파벳인지 확인 ( true : 알파벳O, false : 알파벳X)
• boolean isLowerCase(char ch) 				: 지정된 문자가 알파벳 소문자인지 확인 ( true : 소문자O, false : 소문자X)
• boolean isUpperCase(char ch) 				: 지정된 문자가 알파벳 대문자인지 확인 ( true : 대문자O, false : 대문자X)
• boolean isWhitespace(char ch) 			: 지정된 문자가 공백인지 확인 ( true : 공백O, false : 공백X)
• boolean isDigit(char ch) 					: 지정된 문자가 숫자인지 확인 ( true : 숫자O, false : 숫자X)
• static boolean isDefined(char ch) 		: 문자가 Unicode로 정의되어있는지 여부를 반환
• static boolean isLetter(char ch) 			: 지정된 문자가 범용 문자인지 여부를 반환
• static boolean isLetterOrDigit(char ch) 	: 지정된 문자가 범용 문자 또는 숫자인지 여부를 반환
• int compareTo(Character c) 				: 2개의 Character를 수치로서 비교
• int compareTo(Object o) 					: Character 객체를 지정된 객체와 비교
• String toString() 						: 문자 값을 String 타입으로 변환
• char charValue() 							: 객체의 문자 값을 반환

----------------------------------------------------------------------

3. Integer
 : 기본 타입 int 를 객체로 정의한 래퍼 클래스

- 메소드 										설명
• static int parseInt(String s) 	  : 문자열 타입의 숫자를 int 타입으로 변환
• static String toString(int i) 	  : int 타입의 숫자를 String 타입으로 변환
• static String toBinaryString(int i) : int 타입의 정수를 2진수 문자열로 반환
• static int bitCount(int i) 		  : 2진수 1의 개수를 반환
• XXX xxxValue() 					  : int 타입의 값을 byte, double 등 다른 숫자 타입으로 변환
										ex) Integer I = 3;
										byte b = i.byteValue( );
										double d = i.doubleValue();

----------------------------------------------------------------------

4. Math
 : 기본 수학 연산과 관련된 메소드들을 제공해주는 클래스
 : 모든 메소드 static 으로 정의
 : Math.XXX( ) 의 형태로 호출 가능
 
- 메소드 										설명
• static double abs(double a)			: 절댓값을 반환
• static double max(double a, double b) : 두 값 중 큰 값을 반환
• static double min(double a, double b) : 두 값 중 작은 값을 반환
• static double round(double a) 		: 십진수를 가장 가까운 값으로 반올림
• static double random() 				: 0.0 보다 크거나 같고 1.0보다 작은 임의의 실숫값을 반환
• static double pow(double a, double b) : a의 b 제곱을 반환
• static double sqrt(double a) 			: 루트, 제곱근을 반환

----------------------------------------------------------------------

5. String
 : 문자열을 표현하기 위한 클래스
 ● 문자열 관련 유용한 메소드 제공
 ● String 불변 클래스 (Immutable Class) → String 객체의 문자열을 변경 불가
 * 불변 클래스 : 한 번 생성된 인스턴스의 값을 변경할 수 없는 클래스
 ● 멀티 쓰레드 환경에서 동기화 됨 (thread safe)

- String 주요 메소드
- 메소드 										설명
• char chatAt(int index) 				: 지정된 index 의 문자를 반환
• String concat(String str) 			: 지정된 문자열 뒤에 문자열 str 을 연결
• boolean contains(CharSequence s) 		: 지정한 문자열이 포함되는지 여부를 반환
• boolean equals(Object o) 				: 지정한 문자열과 문자열 o 가 일치하는지 여부를 반환
• boolean equalsIgnoreCase(String s) 	: 대소문자 구분없이, 두 문자열의 일치 여부를 반환
• int indexOf(String s) 				: 지정한 문자열이 처음 나오는 index 를 반환
• boolean isEmpty() 					: 문자열이 비어 있는지 여부를 반환 (문자열 길이가 0 일 때 true)
• int length() 							: 문자열 길이를 반환 (글자수를 반환)

- String 주요 메소드2
- 메소드 										설명
String replace(CharSequence old,CharSequence new)	: old 문자열을 new 문자열로 대체한 결과 문자열을 반환
String[] split(String regex) 						: 정규 표현식을 지정하여 문자열을 분할하여 String 배열로 반환
String substring(int begin, int end) 				: begin 인덱스부터 end-1 인덱스까지의 문자열을 반환
String toLowerCase() 								: 문자열을 소문자로 변환하여 반환
String toUpperCase() 								: 문자열을 대문자로 변환하여 반환
String trim() 										: 문자열 양쪽 끝의 공백을 제거하여 반환
String valueOf(int i) 								: int 타입을 String 으로 변환하여 반환

----------------------------------------------------------------------

6. String Buffer
 : 문자열을 변경할 수 있는 클래스
 • StringBuffer 는 가변 클래스(Immutable Class)
 • 내부적으로 버퍼를 가지고, 여유 버퍼 기본 16 Bytes 를 갖는다.
 • 할당한 문자열의 크기 + 여유버퍼 크기 (16byte)
 • 멀티 쓰레드 환경에서 동기화 됨 (thread safe)
 * 가변 클래스 : 한 번 생성된 인스턴스의 값을 변경할 수 없는 클래스

- 메소드 										설명
• StringBuffer append( 문자열 ) 			: 지정된 문자열에 마지막에 문자열을 추가
• StringBuffer insert( 인덱스, 문자열)		: 지정한 인덱스의 문자열을 추가
• StringBuffer delete( 인덱스 ) 			: 지정한 인덱스의 문자열을 삭제
• int capacity() 						: 현재 버퍼 크기 반환

- String Buffer 주요 메소드
- 메소드 										설명
• StringBuffer append(String s) 			: 해당 문자열에 문자열 s 를 추가
• int capacity() 							: 현재 용량을 반환
• int length() 							: 문자열의 길이를 반환
• public char chatAt(int index) 			: 지정된 index 위치의 문자를 반환
• StringBuffer insert(int i, String s) 	: 해당 문자열에 i 번째 위치에 문자열 s 을 추가
• StringBuffer delete(int start, int end) : 해당 문자열에서 start ~ end-1 범위 문자열을 제거
• StringBuffer replace(int start, int end, 
  String s) 								: start ~ end-1 범위의 문자열을 문자열 s 로 대체
• StringBuffer reverse() 					: 문자열을 역순으로 반환
• String substring(int start) 			: start 부터 끝 위치의 문자열을 반환
• String substring(int start, int end) 	: start ~ end-1 범위의 문자열을반환

----------------------------------------------------------------------

7. String Builder
 : 문자열을 변경할 수 있는 클래스
 • StringBuilder 는 가변 클래스(Immutable Class)
 • 내부적으로 버퍼를 가지고, 여유 버퍼 기본 16 Bytes 를 갖는다.
 • 할당한 문자열의 크기 + 여유버퍼 크기 (16byte)
 • 멀티 쓰레드 환경에서 동기화 안 됨 , 단일 쓰레드 환경에서 성능 좋음

- 메소드 										설명
• StringBuilder append( 문자열 ) 지정된 문자열에 마지막에 문자열을 추가
• StringBuilder insert( 인덱스, 문자열) 지정한 인덱스의 문자열을 추가
• StringBuilder replace( 시작idx, 끝idx, 문자열) 시작idx ~ 끝idx 까지의 문자열 대체
• StringBuilder delete( 인덱스 ) 지정한 인덱스의 문자열을 삭제
• int capacity() 현재 버퍼 크기 반환


- 메소드 										설명
• StringBuilder append(String s) 			: 해당 문자열에 문자열 s 를 추가
• int capacity() 							: 현재 용량을 반환
• int length() 								: 문자열의 길이를 반환
• public char chatAt(int index) 			: 지정된 index 위치의 문자를 반환
• StringBuilder insert(int i, String s) 	: 해당 문자열에 i 번째 위치에 문자열 s 을 추가
• StringBuilder replace(int start, int end, 
  String s) 								: start ~ end-1 범위의 문자열을 문자열 s 로 대체
• StringBuilder reverse() 					: 문자열을 역순으로 반환
• String substring(int start) 				: start 부터 끝 위치의 문자열을 반환
• String substring(int start, int end) 		: start ~ end-1 범위의 문자열을반환

----------------------------------------------------------------------

8. Random
: 다양한 타입의 난수를 생성하는 클래스

- 메소드 										설명
• boolean nextBoolean() 	: Boolean 타입의 난수 반환
• double nextDouble() 		: double 타입의 난수 반환
• float nextFloat() 		: float 타입의 난수 반환
• int nextInt() 			: int 타입의 난수 반환
• int nextInt(int bound) 	: 한계 값을 지정하여 난수 반환
• long nextLong() 			: long 타입의 난수 반환
• void setSeed(long seed) 	:  seed 값을 지정
----------------------------------------------------------------------

9. Arrays
: 배열을 다루는 여러 기능을 가진 클래스

- 메소드 														설명
• static void sort(Object[] o) 							: 배열을 오름 차순으로 정렬
• static int binarySearch(Object[] o, Object key) 		: 이진 탐색 알고리즘으로 배열 o 에서 key 를 검색하여 위치를 반환
• static <T> T[] copyOf(T[] o, int length) 				: 주어진 배열 o 를 length 길이 만큼만 복사하여 새 배열로 반환
• static <T> T[] copyOfRange(T[] o, int from, int to) 	: 주어진 배열 o 를 (from~to-1) 범위 만큼 복사하여 새 배열로 반환
• static boolean equals(Object[] a, Object[] b) 		: 배열 a, b 가 일치하는지 여부를 반환
• static void fill(Object[] a, Object b) 				: 주어진 배열 a 의 모든 요소를 값 b 로 채움

----------------------------------------------------------------------

10. Calendar
: 날짜/시간 정보를 생성 및 변환하는 클래스

- 메소드 										설명
• Calendar getInstance() 		: 현재 날짜/시간 정보를 가지고 있는 Calendar 인스턴스를 반환
• boolean after(Object o) 		: 해당 객체가 비교 객체 o 보다 이후 시간인지 여부를 반환 (이후이면 true)
• boolean before(Object o) 		: 해당 객체가 비교 객체 o 보다 이전 시간인지 여부를 반환 (이전이면 true)
• boolean equals(Object o)		: 해당 객체와 비교 객체 o 와 일치 여부를 반환 (같은 날짜/시간이면 true)
• int get(int field)			: 지정한 날짜/시간 정보를 반환 (field 로 Calendar 상수를 지정)
• long getTimeInMillis()		: 시간 값을 밀리초 단위로 반환
• void set(int field, int value): 날짜/시간 정보를 지정 (field 값을 value 로 지정)
• void setTime(Date date) 		: 날짜/시간 정보를 Date 객체로 지정

- Calendar 주요 상수
- 상수 							설명
• Calendar.YEAR 			: 현재 연도 반환 ex) 2024
• Calendar.MONTH 			: 현재 월 (0~11 : 1월~12월)
• Calendar.DATE 			: 현재 월의 날짜
• Calendar.WEEK_OF_YEAR 	: 올해 기준 주차 수
• Calendar.WEEK_OF_MONTH 	: 당월 기준 주차 수
• Calendar.DAY_OF_YEAR 		: 올해 기준 날짜
• Calendar.DAY_OF_MONTH 	: 당월 기준 날짜
• Calendar.DAY_OF_WEEK 		: 현재 요일 (일요일: 1 ~ 토요일 : 7)
• Calendar.HOUR 			: 현재 시간 ( 12시 )
• Calendar.HOUR_OF_DAY 		: 현재 시간 ( 24시 )
• Calendar.MINUTE			: 현재 분
• Calendar.SECOND 			: 현재 초

----------------------------------------------------------------------

11. Date
: 날짜/시간 정보를 나타내는 클래스
 • JDK 1.1 버전 이후로 변환 및 형식 관련 메소드는 deprecated 됨
 • 날짜 변환은 Calendar 클래스로 사용
 • 형식 지정은 DateFormat 클래스로 사용

 ----------------------------------------------------------------------
 