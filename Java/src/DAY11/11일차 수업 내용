------ 2024-02-16
------ 11일차 수업 내용

1. 예외 처리
- Compile Error
 : 컴파일하는 과정에서 발생하는 오류로 프로그램이 실행이 불가능하다
 : 프로그램 문법에 맞지 않는 코드를 작성한 경우
  -> 실행문 끝에 ; 기호 누락
  -> (), {} 괄호의 짝이 맞지 않는 경우
  -> 선언하지 않는 변수 사용 등

- Runtime Error
 : 프로그램 실행 과정에서 발생하는 오류
 : 분류 
  - 에러, Error
  - 예외, Exception

- Error
 : JVM, H/W 등의 시스템 문제로 인해 발생하는 실행 오류
 : 복구 또는 처리 할 수 없다.
 
- Exception
 : 사용자의 잘못이나 개발자의 잘못으로 발생하는 실행오류
 : 복구 또는 처리 가능하다 
  -> 예외처리 (Exception Handling)
 ex) 숫자를 0으로 나누는 경우 (indivision by 0)
     배열의 접근할 수 없는 index를 접근하는 경우 (out of index)
     정수 입력 메소드에 문자가 입력된 경우  (not matched type)
  
- Exception Handling, 예외 처리
try {
	예외가 발생할 가능성이 있는 문장
}  
catch(예외타입 변수명) {
 	예외처리 문장
}  
finally {
	예외 여부와 무관하게 실행할 문장 
}

----------------------------------------------------------------------

2. 다운 캐스팅 (강제 형 변환)
 * 전제 조건 : 업 캐스팅
 -  다운 캐스팅은 업 캐스팅된 부모 객체를 자식 객체로 변환하는 것.
 - 업캐스팅 		: (부모) <- (자식)
 - 다운캐스팅	: (자식) <- (부모)

----------------------------------------------------------------------

3. Binding
 : 프로그램에서 사용되는 요소에 실제 값을 결정짓는 행위

 - 정적 바인딩
 : 컴파일 시간에 결정
 변수 등

 - 동적 바인딩
 : 실행 시간에 결정
 오버라이딩 등
 
----------------------------------------------------------------------
 
 4. 다중 Catch
 : 여러 예외를 각각 다른 catch 블록에서 처리하는 것을 의미한다.
 
 * catch(변수명) 작성 시 상위 예외 클래스가 하위 예외 클래스보다 아래쪽에 위치해야한다.
 
 try {
 	예외 발생할 가능성이 있는 문장
 }
 catch(예외타입 변수명) {
 	예외 처리 문장
 }
 catch(예외타입 변수명) {
 	예외 처리 문장
 }
 
----------------------------------------------------------------------
 
 5. 주요 예외 클래스
 - NullPointerExceptoin 			: null 을 갖는 참조 변수로 접근 연산자(.)를 사용했을 때 발생하는 예외
 - ArrayIndexOutOfBoundsException 	: 배열에서 범위를 초과한 인덱스로 접근할 때 발생하는 예외
 - NumberFormatException 			: 숫자로 변환할 수 없는 문자열을 숫자로 변환할 때 발생하는 예외
 - ClassCastException 				: 부모/자식 관계가 없는 클래스 간에 강제로 타입변환 시 발생하는 예외
 - ArithmeticException 				: 숫자를 0으로 나누는 등의 산술연산 관련에 문제시 발생하는 예외
 
----------------------------------------------------------------------
 
 6. try-with-resources
 - 자동 리소스 닫기 (Auto Close)
 : 예외 처리 후, 사용된 리소스 객체를 자동으로 닫는 기법
   AutoClosable 인터페이스를 구현한 클래스여야 자동으로 자원해제가 가능하다.

* 자동으로 자원을 해제시킬 객체를 try() 괄호 안에서 생성하면, 자동으로 해제 된다.

 try(클래스 객체명 = new 클래스()) {
 	예외 발생할 가능성이 있는 문장
 }
 catch(예외타입 변수명) {
 	예외처리 문장
 }
 
----------------------------------------------------------------------
 
 7. 예외 전가
 - 예외전가 (예외 던지기, 예외 떠넘기기)
  : 예외 처리의 책임을 메소드를 호출한 곳으로 넘기는 것
   	메소드 정의 뒤에, throws 를 작성하고 예외 클래스를 나열
  - 키워드 : throws
  접근지정자 반환타입 메소드명 (매개변수 ...) throws 예외클래스1, 예외클래스2 { 
   
  } 


 8. 예외 강제 발생
 - 예외를 강제로 발생시키는 방법
 - 키워드 : throw
 : 코드 실행 흐름에 따라, 예외를 강제로 발생시켜 처리할 때 사용한다.
 throw new 예외클래스( ); 
 
----------------------------------------------------------------------

 9. 패키지
 - 패키지  	|---> 내장 패키지
        	|---> 사용자 정의 패키지
        	
 - 패키지 선언
 : package 패키지명;
 
 - 패키지 사용
 : import 패키지명.클래스명;
 
 - JDK 주요 패키지
 java.lang
 : 문자열, 표준 입출력, 수학함수 등과 관련한 기본적인 클래스와 인터페이스
   제일 많이 사용되는 패키지로, import 없이도 사용이 가능하다.
 
 java.utl
 : 날짜, 시간, 컬렉션 등 유용한 기능을 제공하는 클래스와 인터페이스
 
 java.io
 : 입출력과 관련한 클래스와 인터페이스
 
----------------------------------------------------------------------

 
 
 
 
 
 
 
 
 