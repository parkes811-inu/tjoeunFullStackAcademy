------ 2024-02-26
------ 17일차 수업 내용

1. Lambda Expression
 : 람다식은 함수형 프로그래밍을 제공하는 자바의 방식
   익명 함수를 (매개 변수) -> { 실행문 } 과 같은 형태로 정의한 방식
   * 람다식으로 함수를 정의하면, 클래스 없이도 정의가 가능하다.
   
						  	
----------------------------------------------------------------------

2. 스트림
 : 배열이나 컬렉션의 요소들을 함수형 프로그래밍 방식으로 처리하는 클래스
 * 주요 기능 (연산)
 	: 전체 반복, 정렬, 필터, 매핑
  - 중간 연산
  	1) filter	: 조건에 맞는 요소를 추출하는 키워드
  	2) map		: 요소가 가진 특정 변수 또는 새로운 요소를 반환하는 키워드 
  - 최종 연산
  	1) forEach	: 모든 요소를 반복
  	2) count	: 요소의 개수 반환
  	3) sum		: 요소의 합계 반환
  	4) reduce	: 요소들을 결합한 단일 결과값을 반환
	* reduce 예시 
	 - Arrays.stream(arr).reduce( 0,	(a, b) -> a + b );
								----	----------------
								초기값		  람다식
								
- 형식
int[] arr  = {1, 2, 3, 4, 5};
Arrays.stream(arr).forEach(n -> System.out.println(n));
-----------------  -----------------------------------
  스트림 객체 생성 				전체 반복 기능
  
----------------------------------------------------------------------

3. Method Reference (::)
- 사용 방법 : 클래스명::메소드명
: 메소드 레퍼런스(참조정보)를 지정하는 문법
 - 메소드 호출 시 전달 인자로 메소드 레퍼런스를 지정하여 넘겨줄 수 있다.
 - 메소드를 통해 메소드를 전달하는 람다식을 대체하는 문법
ex)  
// list.stream().sorted( Comparator.comparing( p -> p.getName()) )
list.stream().sorted( Comparator.comparing( Person::getName) )
			 .forEach(p -> System.out.println(p));