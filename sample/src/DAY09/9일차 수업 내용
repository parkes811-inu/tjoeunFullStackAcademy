1. 인터페이스

C : Create, 생성
R : Read, 	읽기
U : Update, 갱신
D : Delete, 삭제

* 실습 내용 : DAY09.Ex01_Computer, Ex02_Board 참고

----------------------------------------------------------------------

2. 중첩 클래스 (Nested Class)
- 클래스 내부에 선언한 클래스
- 특정 클래스에 의존하는 클래스를 정의할 때 사용된다.
- 바깥 클래스는 Outer Class
- 내부 클래스는 Inner Class
- 각각 Outer/Inner 클래스의 멤버에 쉽게 접근이 가능하다.

- 멤버 클래스
 : 인스턴스 이너 클래스
  - A 객체를 생성해야만 사용할 수 있는 B 이너클래스
  
 : static 이너 클래스
  - A 클래스로 바로 접근할 수 있는 B 이너클래스
  
- 로컬 클래스
 : 메소드 내 클래스 정의,
  - 메소드가 실행될 때만 사용되는 이너클래스

중첩 클래스 객체 생성
// 인스턴스 이너 클래스
// A : Outer Class
// B : Inner Class

A a = new A();
A.B b = a.new B();

// static 이너 클래스
// A : Outer Class
// B : Inner Class (static)

A.B b = new A.B()
  
----------------------------------------------------------------------

3. 중첩 인터페이스 (Nested Interface)
- 클래스 내부에 선언한 인터페이스
- 특징 :
 1. static 이너 인터페이스만 존재
  -> static을 생략하면, 컴파일러가 자동으로 추가한다.
 2. 인터페이스의 구현 객체 생성 방법 : 인터페이스 타입 객체명 = new 구현클래스();
 3. 이너 인터페이스 타입 : '아우터 클래스.이너 인터페이스' 

----------------------------------------------------------------------

4. 익명 객체
- 익명 자식 객체 : 재사용 되지 않고, 이름없이 한 번만 생성하여 사용하는 자식 객체
- 형식 
부모클래스 객체명 = new 부모클래스(인자1, ---) {
	// 변수 
	// 메소드
}

- 익명 구현 객체 : 재사용 되지 않고, 이름없이 한 번만 생성하여 사용하는 구현 객체
- 형식
인터페이스 객체명 = new 인터페이스(인자1, ---) {
	// 변수
	// 메소드
	// 추상메소드를 오버라이딩한 메소드
}

----------------------------------------------------------------------
