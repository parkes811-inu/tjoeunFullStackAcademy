------ 2024-02-20
------ 13일차 수업 내용

1. SimpleDateFormat
 : 언어 및 국가정보를 가진 Locale 객체를 반영하여, 날짜를 형식화 하거나 구문 분석하는 클래스
 
- 생성자 									설명
• SimpleDateFormat( ) 				: 기본 패턴으로 객체를 생성
• SimpleDateFormat(String pattern) 	: 문자열 pattern 으로 지정한 날짜 형식을 지정하여 객체를 생성

- 메소드 									설명
• String format(Date date) 			: 객체에 지정된 pattern 에 따라 Date 객체를 문자열로 변환
• Date parse(String pattern) 			: 객체에 지정된 pattern 에 따라 문자열 날짜 값을 Date 객체로 반환

----------------------------------------------------------------------

2. Date
 : 날짜/시간 정보를 나타내는 클래스
 JDK 1.1 버전 이후로 변환 및 형식 관련 메소드는 deprecated 됨
 날짜 변환은 Calendar 클래스로 사용
 형식 지정은 DateFormat 클래스로 사용

- Date 주요 메소드
- 메소드 										설명
• boolean after(Date d) 			: 해당 객체가 d 보다 이후 인지 여부 반환 (이후이면 true)
• boolean before(Date d) 			: 해당 객체가 d 보다 이전 인지 여부 반환 (이전이면 true)
• int compareTo(Date d)				: 해당 객체와 비교 객체 d 를 비교하여, -1, 0, 1 을 반환
									- 해당 객체 > 비교 객체 : 1
									- 해당 객체 = 비교 객체 : 0
									- 해당 객체 < 비교 객체 : -1
• boolean equals(Objec o) 			: 해당 객체와 비교 객체 o 의 시간 정보가 일치하는 지 여부를 반환
• long getTime() 					: 1970/01/01 00:00:00 부터 해당 객체까지의 시간을 ms(밀리초) 단위로 반환
• void setTime(long time) 			: 1970/01/01 00:00:00 부터 ms 단위로 측정한 시간값으로 시간을 지정

----------------------------------------------------------------------

3. StringTokenizer
 : 구분 문자로 문자열을 토큰으로 나누어 사용하는 클래스
   String str = “변수,클래스,메소드,생성자,오버로딩,오버라이딩”;
   StringTokenizer st = new StringTokenizer(str, “,”);
   토큰 (Token) – 구분문자를 기준으로 나누어지 문자열

- StringTokenizer 주요 메소드
- 메소드 										설명
• int countTokens() 				: 전체 토큰 개수를 반환
• boolean hasMoreTokens() 			: 다음 토큰이 남아 있는지 여부를 반환
• boolean hasMoreElements() 		: 다음 토큰이 남아 있는지 여부를 반환
• String nextToken() 				: 다음 토큰을 반환
• String nextElement() 				: 다음 토큰을 반환

----------------------------------------------------------------------

4. LocalDate
: 시스템 시간을 기준으로, 날짜 정보를 나타내는 클래스

- 메소드 													설명
• static LocalDate now() 							: 시스템 시간으로부터 현재 날짜 정보를 가져와 LocalDate 객체를 반환
• static LocalDate of(int year, int month, int day) : 연 day, 월 month, 일 day 을 지정하여 LocalDate 객체를 반환
• int get(TemporalField field)						: ChronoField 상수값에 해당하는 날짜 정보(연, 월, 일) 를 반환
													- 연 : date.get(ChronoField.YEAR);
													- 월 : date.get(ChronoField.MONTH_OF_YEAR);
													- 일 : date.get(ChronoField.DAY_OF_MONTH);
• int getYear() 									: 연도를 반환
• int getMonthValue() 								: 월을 반환
• int getDayOfMonth() 								: 일을 반환
• int getDayOfYear() 								: 올해의 몇 번째 날인지 반환

----------------------------------------------------------------------

5. LocalTime
: 시스템 시간을 기준으로, 시간 정보를 나타내는 클래스

- 메소드 								설명
• static LocalDate now() 		: 시스템 시간으로부터 현재 시간 정보를 가져와 LocalTime 객체를 반환
• static LocalDate of(int hour, 
    int min, int sec, int ns) 	: 시간, 분, 초, 나노초 를 지정하여 LocalTime 객체를 반환
• int get(TemporalField field)	: ChronoField 상수값에 해당하는 시간 정보(시, 분, 초) 를 반환
								- 시 : date.get(ChronoField.HOUR_OF_DAY);
								- 분 : date.get(ChronoField.MINUTE_OF_HOUR);
								- 초 : date.get(ChronoField.SECOND_OF_MINUTE);
• int getHour() 				: 시간을 반환
• int getMinute() 				: 분을 반환
• int getSecond() 				: 초를 반환
• int getNano() 				: 나노 초를 반환

----------------------------------------------------------------------

6. ZonedDateTime
: 지정한 타임존을 기준으로, 날짜/시간 정보를 나타내는 클래스

- 메소드 										설명
• static ZonedDateTime now(ZoneId id) 		: 지정된 타임존으로부터 날짜/시간 정보를 가져와 ZonedDateTime 객체를 반환
											- ZoneId.of(“타임존 이름“) 메소드로 ZoneId 객체를 가져올 수 있다
											- TimeZone.getAvailableIDs() 메소드로 사용가능한 타임존 아이디를 확인할 수 있다
• int getYear() 							: 연도를 반환
• int getMonthValue() 						: 월을 반환
• int getDayOfMonth() 						: 일을 반환
• int getDayOfYear() 						: 올해의 몇 번째 날인지 반환
• int getHour() 							: 시간을 반환
• int getMinute() 							: 분을 반환
• int getSecond() 							: 초를 반환
• int getNano() 							: 나노 초를 반환

----------------------------------------------------------------------

7. MessageFormat
 : 문자열 템플릿을 지정하여, 동적인 값들을 형식에 대입하여 사용하는 클래스

- 메소드 													설명
• static String format(String pattern, String... str) : 객체에 지정된 pattern 에 따라 Date 객체를 문자열로 변환
• ex) 
String pattern = “아이디 : {0}, 비밀번호 : {1}”;
MessageFormat.format(pattern, “aloha”, “123456”);
// -> “아이디 : aloha, 비밀번호 : 123456”

----------------------------------------------------------------------

8. 제네릭 (Generics)
 : 모든 클래스타입을 다룰 수 있도록 타입 매개변수로 클래스/메소드를 정의하는 기법
 "클래스를 정의할 때, 타입을 확정 짓지 않고 객체 생성할 때, 타입을 특정하는 기법"

- 타입매개변수	 			관례적 표기
• T 			:		타입(Type)
• K 			:		키(Key)
• V 			:		값(Value)
• N 			:		숫자(Number)
• E 			:		원소(Element)

- 형식
class 클래스명 <타입매개변수1, 타입매개변수2> {

...

- 예제
 : 메소드를 정의하는 시점에 타입이 결정하지 않고, 메소드를 호출하는 시점에 타입을 결정한다.

• 메소드를 정의할 때, 제네릭 기법을 사용
접근 지정자 <T> 반환타입 메소드명(매개변수) {

...

}

• 형태
 1. 접근지정자 <T> T 메소드명 (T t) { }
 2. 접근지정자 <T, V> T 메소드명 (T t, V v) { }
 3. 접근지정자 <T> void 메소드명 (T t) { }
 4. 접근지정자 <T> T 메소드명 ( ) { }
 

